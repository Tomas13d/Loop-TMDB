{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useMatch, useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const {\n    user,\n    searched\n  } = useContext(UserContext);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [moviesGener, setMoviesGener] = useState([]); //para hacer el pedido a el back /api/movies/geners/ID\n\n  const {\n    id\n  } = useParams();\n  const match = useMatch(`/geners/${id}`);\n  useEffect(() => {\n    axios.get(\"api/movies/upcoming\").then(res => setUpcomingMovies(res.data.results)).catch(err => console.log(err));\n    axios.get(\"/api/movies/popular\").then(res => setPopularMovies(res.data.results)).catch(err => console.log(err));\n    axios.get(\"api/series\").then(res => setSeries(res.data.results)).catch(err => console.log(err));\n  }, []); //geners solo si matchea con /geners/id\n\n  useEffect(() => {\n    axios.get(`/api/movies/geners/${id}`).then(res => setMoviesGener(res.data.results)).catch(err => console.log(err));\n  }, [match]); ///seting favs movies only if the user is login\n  //you can't see series in favs in this proyect (to be continue... )\n\n  useEffect(() => {\n    if (user.id) {\n      let favMovies = [];\n      user.favMoviesId.map((id, i) => {\n        axios.get(`api/movies/single/${id}`).then(res => favMovies.push(res.data)).catch(err => console.log(err));\n      });\n      setFavorites(favMovies);\n    }\n  }, [user.favMoviesId]);\n  return id ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerGrid\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      moviesGener: moviesGener\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerGrid\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      favorites: favorites,\n      popularMovies: popularMovies,\n      series: series,\n      upcomingMovies: upcomingMovies,\n      search: searched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"Pfg0ndai1woZzKc1JddQwDKmiY4=\", false, function () {\n  return [useParams, useMatch];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx"],"names":["axios","React","useEffect","useState","useContext","useMatch","useParams","UserContext","Grid","Content","user","searched","popularMovies","setPopularMovies","favorites","setFavorites","series","setSeries","upcomingMovies","setUpcomingMovies","moviesGener","setMoviesGener","id","match","get","then","res","data","results","catch","err","console","log","favMovies","favMoviesId","map","i","push"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useMatch, useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\n\nconst Content = () => {\n  const { user, searched } = useContext(UserContext);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [moviesGener, setMoviesGener] = useState([]);\n\n  //para hacer el pedido a el back /api/movies/geners/ID\n  const { id } = useParams();\n  const match = useMatch(`/geners/${id}`);\n\n  useEffect(() => {\n    axios\n      .get(\"api/movies/upcoming\")\n      .then((res) => setUpcomingMovies(res.data.results))\n      .catch((err) => console.log(err));\n\n    axios\n      .get(\"/api/movies/popular\")\n      .then((res) => setPopularMovies(res.data.results))\n      .catch((err) => console.log(err));\n\n    axios\n      .get(\"api/series\")\n      .then((res) => setSeries(res.data.results))\n      .catch((err) => console.log(err));\n  }, []);\n\n  //geners solo si matchea con /geners/id\n  useEffect(() => {\n    axios\n      .get(`/api/movies/geners/${id}`)\n      .then((res) => setMoviesGener(res.data.results))\n      .catch((err) => console.log(err));\n  }, [match]);\n\n  ///seting favs movies only if the user is login\n  //you can't see series in favs in this proyect (to be continue... )\n  useEffect(() => {\n    if (user.id) {\n      let favMovies = [];\n      user.favMoviesId.map((id, i) => {\n        axios\n          .get(`api/movies/single/${id}`)\n          .then((res) => favMovies.push(res.data))\n          .catch((err) => console.log(err));\n      });\n      setFavorites(favMovies);\n    }\n  }, [user.favMoviesId]);\n\n  \n  return id ? (\n    <div className=\"containerGrid\">\n    <Grid moviesGener={moviesGener} />\n    </div>\n  ) : (\n    <div className=\"containerGrid\">\n    <Grid\n      favorites={favorites}\n      popularMovies={popularMovies}\n      series={series}\n      upcomingMovies={upcomingMovies}\n      search={searched}\n    />\n     </div>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}