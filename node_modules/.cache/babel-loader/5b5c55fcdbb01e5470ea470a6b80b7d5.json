{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const {\n    user,\n    searched\n  } = useContext(UserContext);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [moviesByGener, setMoviesByGener] = useState([]);\n  const {\n    id\n  } = useParams();\n  console.log(id);\n  useEffect(() => {\n    axios.get(\"api/movies/upcoming\").then(res => setUpcomingMovies(res.data.results));\n    axios.get(\"/api/movies/popular\").then(res => setPopularMovies(res.data.results));\n    axios.get(`api/movies/geners/${id}`).then(res => setMoviesByGener(res.data.results));\n    axios.get(\"api/series\").then(res => setSeries(res.data.results));\n  }, []); ///seting favs movies only if the user is login\n  //ypu can't see series in favs in this proyect (to be continue... )\n\n  useEffect(() => {\n    if (user.id) {\n      let favMovies = [];\n      user.favMoviesId.map((id, i) => {\n        axios.get(`api/movies/single/${id}`).then(res => {\n          favMovies.push(res.data);\n        });\n      });\n      setFavorites(favMovies);\n    }\n  }, [user.favMoviesId]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    favorites: favorites,\n    popularMovies: popularMovies,\n    series: series,\n    upcomingMovies: upcomingMovies,\n    search: searched,\n    moviesByGener: moviesByGener\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Content, \"TIKd7Q09AELiFrI0Q3qLVS9xaXg=\", false, function () {\n  return [useParams];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx"],"names":["axios","React","useEffect","useState","useContext","useParams","UserContext","Grid","Content","user","searched","popularMovies","setPopularMovies","favorites","setFavorites","series","setSeries","upcomingMovies","setUpcomingMovies","moviesByGener","setMoviesByGener","id","console","log","get","then","res","data","results","favMovies","favMoviesId","map","i","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,IAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,UAAU,CAACE,WAAD,CAApC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM;AAACkB,IAAAA;AAAD,MAAKhB,SAAS,EAApB;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AAGAnB,EAAAA,SAAS,CAAC,MAAI;AAEVF,IAAAA,KAAK,CACHwB,GADF,CACM,qBADN,EAEEC,IAFF,CAEOC,GAAG,IAAIR,iBAAiB,CAACQ,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF/B;AAIA5B,IAAAA,KAAK,CACHwB,GADF,CACM,qBADN,EAEEC,IAFF,CAEOC,GAAG,IAAId,gBAAgB,CAACc,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF9B;AAIF5B,IAAAA,KAAK,CACDwB,GADJ,CACS,qBAAoBH,EAAG,EADhC,EAEII,IAFJ,CAESC,GAAG,IAAIN,gBAAgB,CAACM,GAAG,CAACC,IAAJ,CAASC,OAAV,CAFhC;AAIG5B,IAAAA,KAAK,CACJwB,GADD,CACK,YADL,EAECC,IAFD,CAEMC,GAAG,IAAIV,SAAS,CAACU,GAAG,CAACC,IAAJ,CAASC,OAAV,CAFtB;AAMJ,GApBQ,EAoBP,EApBO,CAAT,CAbiB,CAmCpB;AACG;;AACA1B,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGO,IAAI,CAACY,EAAR,EAAW;AACP,UAAIQ,SAAS,GAAG,EAAhB;AAECpB,MAAAA,IAAI,CAACqB,WAAN,CAAmBC,GAAnB,CAAuB,CAACV,EAAD,EAAIW,CAAJ,KAAU;AAC7BhC,QAAAA,KAAK,CACJwB,GADD,CACM,qBAAoBH,EAAG,EAD7B,EAECI,IAFD,CAEMC,GAAG,IAAI;AACTG,UAAAA,SAAS,CAACI,IAAV,CAAeP,GAAG,CAACC,IAAnB;AACF,SAJF;AAKH,OAND;AAOAb,MAAAA,YAAY,CAACe,SAAD,CAAZ;AAEH;AACJ,GAdQ,EAcP,CAAEpB,IAAI,CAACqB,WAAP,CAdO,CAAT;AAgBA,sBAGO,QAAC,IAAD;AACA,IAAA,SAAS,EAAEjB,SADX;AAEA,IAAA,aAAa,EAAEF,aAFf;AAGA,IAAA,MAAM,EAAEI,MAHR;AAIA,IAAA,cAAc,EAAEE,cAJhB;AAKA,IAAA,MAAM,EAAEP,QALR;AAMA,IAAA,aAAa,EAAES;AANf;AAAA;AAAA;AAAA;AAAA,UAHP;AAeH,CApED;;GAAMX,O;UAQSH,S;;;KARTG,O;AAsEN,eAAeA,OAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\n\n\nconst Content = () =>{\n    const { user, searched} = useContext(UserContext)\n    const [popularMovies, setPopularMovies] = useState([]);\n    const [favorites, setFavorites] = useState([]);\n    const [series, setSeries] = useState([]);\n    const [upcomingMovies, setUpcomingMovies] = useState([]);\n    const [moviesByGener, setMoviesByGener] = useState([]);\n    \n    const {id}=useParams();\n\n    console.log(id)\n  \n\n    useEffect(()=>{\n\n        axios\n         .get(\"api/movies/upcoming\")\n         .then(res => setUpcomingMovies(res.data.results))\n       \n        axios \n         .get(\"/api/movies/popular\")\n         .then(res => setPopularMovies(res.data.results))\n\n      axios\n         .get(`api/movies/geners/${id}`)\n         .then(res => setMoviesByGener(res.data.results))\n\n         axios\n         .get(\"api/series\")\n         .then(res => setSeries(res.data.results))\n        \n\n   \n    },[])\n\n ///seting favs movies only if the user is login\n    //ypu can't see series in favs in this proyect (to be continue... )\n    useEffect(()=>{\n        if(user.id){\n            let favMovies = [];\n\n            (user.favMoviesId).map((id,i) => {\n                axios\n                .get(`api/movies/single/${id}`)\n                .then(res => {\n                    favMovies.push(res.data);\n                 })\n            })\n            setFavorites(favMovies)\n    \n        }\n    },[(user.favMoviesId)])\n   \n    return (\n       \n    \n           <Grid \n           favorites={favorites} \n           popularMovies={popularMovies} \n           series={series} \n           upcomingMovies={upcomingMovies} \n           search={searched}\n           moviesByGener={moviesByGener}\n           \n           />\n        \n      \n    )\n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}