{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useMatch, useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const {\n    user,\n    searched\n  } = useContext(UserContext);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [moviesGener, setMoviesGener] = useState([]);\n  const {\n    id\n  } = useParams();\n  const match = useMatch(`/geners/${id}`);\n  useEffect(() => {\n    axios.get(\"api/movies/upcoming\").then(res => setUpcomingMovies(res.data.results));\n    axios.get(\"/api/movies/popular\").then(res => setPopularMovies(res.data.results));\n    /*   axios\n         .get(`api/movies/geners/${id}`)\n         .then(res => {\n            console.log(res.data)\n         }) */\n\n    axios.get(\"api/series\").then(res => setSeries(res.data.results));\n  }, []); ///seting favs movies only if the user is login\n  //ypu can't see series in favs in this proyect (to be continue... )\n\n  useEffect(() => {\n    if (user.id) {\n      let favMovies = [];\n      user.favMoviesId.map((id, i) => {\n        axios.get(`api/movies/single/${id}`).then(res => {\n          favMovies.push(res.data);\n        });\n      });\n      setFavorites(favMovies);\n    }\n  }, [user.favMoviesId]);\n  return match ? /*#__PURE__*/_jsxDEV(Grid, {\n    moviesGener: moviesGener\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n    favorites: favorites,\n    popularMovies: popularMovies,\n    series: series,\n    upcomingMovies: upcomingMovies,\n    search: searched\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Content, \"4+L/5BNW8Z8SB9BTRuu3iEoGXS0=\", false, function () {\n  return [useParams, useMatch];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx"],"names":["axios","React","useEffect","useState","useContext","useMatch","useParams","UserContext","Grid","Content","user","searched","popularMovies","setPopularMovies","favorites","setFavorites","series","setSeries","upcomingMovies","setUpcomingMovies","moviesGener","setMoviesGener","id","match","get","then","res","data","results","favMovies","favMoviesId","map","i","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,kBAApC;AACA,SAASC,WAAT,QAA4B,IAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,UAAU,CAACG,WAAD,CAApC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AAACmB,IAAAA;AAAD,MAAKhB,SAAS,EAApB;AACA,QAAMiB,KAAK,GAAGlB,QAAQ,CAAE,WAAUiB,EAAG,EAAf,CAAtB;AAIApB,EAAAA,SAAS,CAAC,MAAI;AAEVF,IAAAA,KAAK,CACHwB,GADF,CACM,qBADN,EAEEC,IAFF,CAEOC,GAAG,IAAIP,iBAAiB,CAACO,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF/B;AAIA5B,IAAAA,KAAK,CACHwB,GADF,CACM,qBADN,EAEEC,IAFF,CAEOC,GAAG,IAAIb,gBAAgB,CAACa,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF9B;AAIJ;AACJ;AACA;AACA;AACA;;AAES5B,IAAAA,KAAK,CACJwB,GADD,CACK,YADL,EAECC,IAFD,CAEMC,GAAG,IAAIT,SAAS,CAACS,GAAG,CAACC,IAAJ,CAASC,OAAV,CAFtB;AAMJ,GAtBQ,EAsBP,EAtBO,CAAT,CAbiB,CAqCpB;AACG;;AACA1B,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGQ,IAAI,CAACY,EAAR,EAAW;AACP,UAAIO,SAAS,GAAG,EAAhB;AAECnB,MAAAA,IAAI,CAACoB,WAAN,CAAmBC,GAAnB,CAAuB,CAACT,EAAD,EAAIU,CAAJ,KAAU;AAC7BhC,QAAAA,KAAK,CACJwB,GADD,CACM,qBAAoBF,EAAG,EAD7B,EAECG,IAFD,CAEMC,GAAG,IAAI;AACTG,UAAAA,SAAS,CAACI,IAAV,CAAeP,GAAG,CAACC,IAAnB;AACF,SAJF;AAKH,OAND;AAOAZ,MAAAA,YAAY,CAACc,SAAD,CAAZ;AAEH;AACJ,GAdQ,EAcP,CAAEnB,IAAI,CAACoB,WAAP,CAdO,CAAT;AAgBA,SAAOP,KAAK,gBACR,QAAC,IAAD;AAAM,IAAA,WAAW,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA,UADQ,gBAGR,QAAC,IAAD;AACA,IAAA,SAAS,EAAEN,SADX;AAEA,IAAA,aAAa,EAAEF,aAFf;AAGA,IAAA,MAAM,EAAEI,MAHR;AAIA,IAAA,cAAc,EAAEE,cAJhB;AAKA,IAAA,MAAM,EAAEP;AALR;AAAA;AAAA;AAAA;AAAA,UAHJ;AAiBH,CAxED;;GAAMF,O;UAQSH,S,EACGD,Q;;;KATZI,O;AA0EN,eAAeA,OAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useMatch, useParams } from \"react-router-dom\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\n\n\nconst Content = () =>{\n    const { user, searched} = useContext(UserContext)\n    const [popularMovies, setPopularMovies] = useState([]);\n    const [favorites, setFavorites] = useState([]);\n    const [series, setSeries] = useState([]);\n    const [upcomingMovies, setUpcomingMovies] = useState([]);\n    const [moviesGener, setMoviesGener] = useState([]);\n\n    const {id}=useParams();\n    const match = useMatch(`/geners/${id}`);\n\n\n  \n    useEffect(()=>{\n\n        axios\n         .get(\"api/movies/upcoming\")\n         .then(res => setUpcomingMovies(res.data.results))\n       \n        axios \n         .get(\"/api/movies/popular\")\n         .then(res => setPopularMovies(res.data.results))\n\n    /*   axios\n         .get(`api/movies/geners/${id}`)\n         .then(res => {\n            console.log(res.data)\n         }) */\n\n         axios\n         .get(\"api/series\")\n         .then(res => setSeries(res.data.results))\n        \n\n   \n    },[])\n\n ///seting favs movies only if the user is login\n    //ypu can't see series in favs in this proyect (to be continue... )\n    useEffect(()=>{\n        if(user.id){\n            let favMovies = [];\n\n            (user.favMoviesId).map((id,i) => {\n                axios\n                .get(`api/movies/single/${id}`)\n                .then(res => {\n                    favMovies.push(res.data);\n                 })\n            })\n            setFavorites(favMovies)\n    \n        }\n    },[(user.favMoviesId)])\n   \n    return match ? (\n        <Grid moviesGener={moviesGener} />\n    ) : (\n        <Grid \n        favorites={favorites} \n        popularMovies={popularMovies} \n        series={series} \n        upcomingMovies={upcomingMovies} \n        search={searched}\n        />\n    )\n       \n    \n        \n           \n           \n    \n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}