{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const {\n    user\n  } = useContext(UserContext);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  useEffect(() => {\n    axios.get(\"api/movies/upcoming\").get(res => setUpcomingMovies(res.data.results));\n    axios.get(\"/api/movies/popular\").then(res => setPopularMovies(res.data.results));\n    axios.get(\"api/series\").then(res => setSeries(res.data.results)); ///seting favs movies only if the user is login\n    //ypu can't see series in favs in this proyect (to be continue... )\n\n    if (user.id) {\n      let favMovies = [];\n      user.favMoviesId.map((id, i) => {\n        axios.get(`api/movies/single/${id}`).then(res => {\n          fav.push(res.data);\n        });\n      });\n      setFavorites(favMovies);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-12\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      favorites: favorites,\n      popularMovies: popularMovies,\n      series: series,\n      upcomingMovies: upcomingMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Content, \"zOVB+JemDIYiQ/ixJU5KTkLKk48=\");\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/tomas/Escritorio/Plataforma5/Bootcamp/Integrador/checkpoint-TMDB-220102/src/components/Content.jsx"],"names":["axios","React","useEffect","useState","useContext","UserContext","Grid","Content","user","popularMovies","setPopularMovies","favorites","setFavorites","series","setSeries","upcomingMovies","setUpcomingMovies","get","res","data","results","then","id","favMovies","favMoviesId","map","i","fav","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,IAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAUJ,UAAU,CAACC,WAAD,CAA1B;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AAIAD,EAAAA,SAAS,CAAC,MAAI;AAEVF,IAAAA,KAAK,CACHiB,GADF,CACM,qBADN,EAEEA,GAFF,CAEMC,GAAG,IAAIF,iBAAiB,CAACE,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF9B;AAIApB,IAAAA,KAAK,CACHiB,GADF,CACM,qBADN,EAEEI,IAFF,CAEOH,GAAG,IAAIR,gBAAgB,CAACQ,GAAG,CAACC,IAAJ,CAASC,OAAV,CAF9B;AAICpB,IAAAA,KAAK,CACJiB,GADD,CACK,YADL,EAECI,IAFD,CAEMH,GAAG,IAAIJ,SAAS,CAACI,GAAG,CAACC,IAAJ,CAASC,OAAV,CAFtB,EAVS,CAed;AACA;;AACA,QAAGZ,IAAI,CAACc,EAAR,EAAW;AACP,UAAIC,SAAS,GAAG,EAAhB;AACCf,MAAAA,IAAI,CAACgB,WAAN,CAAmBC,GAAnB,CAAuB,CAACH,EAAD,EAAII,CAAJ,KAAU;AAC7B1B,QAAAA,KAAK,CACJiB,GADD,CACM,qBAAoBK,EAAG,EAD7B,EAECD,IAFD,CAEMH,GAAG,IAAI;AACVS,UAAAA,GAAG,CAACC,IAAJ,CAASV,GAAG,CAACC,IAAb;AACD,SAJF;AAKH,OAND;AAOAP,MAAAA,YAAY,CAACW,SAAD,CAAZ;AAGH;AAIA,GAjCQ,EAiCP,EAjCO,CAAT;AAmCA,sBAEI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACG,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEZ,SAAjB;AAA4B,MAAA,aAAa,EAAEF,aAA3C;AAA0D,MAAA,MAAM,EAAEI,MAAlE;AAA0E,MAAA,cAAc,EAAEE;AAA1F;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH,CAlDD;;GAAMR,O;;KAAAA,O;AAoDN,eAAeA,OAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { UserContext } from \"..\";\nimport Grid from \"./Grid\";\n\n\nconst Content = () =>{\n    const { user} = useContext(UserContext)\n    const [popularMovies, setPopularMovies] = useState([]);\n    const [favorites, setFavorites] = useState([]);\n    const [series, setSeries] = useState([]);\n    const [upcomingMovies, setUpcomingMovies] = useState([]);\n    \n   \n\n    useEffect(()=>{\n\n        axios\n         .get(\"api/movies/upcoming\")\n         .get(res => setUpcomingMovies(res.data.results))\n       \n        axios \n         .get(\"/api/movies/popular\")\n         .then(res => setPopularMovies(res.data.results))\n\n         axios\n         .get(\"api/series\")\n         .then(res => setSeries(res.data.results))\n        \n\n    ///seting favs movies only if the user is login\n    //ypu can't see series in favs in this proyect (to be continue... )\n    if(user.id){\n        let favMovies = [];\n        (user.favMoviesId).map((id,i) => {\n            axios\n            .get(`api/movies/single/${id}`)\n            .then(res => {\n               fav.push(res.data);\n             })\n        })\n        setFavorites(favMovies)\n\n\n    }\n        \n   \n    \n    },[])\n   \n    return (\n       \n        <div className=\"col-12\">\n           <Grid favorites={favorites} popularMovies={popularMovies} series={series} upcomingMovies={upcomingMovies}/>\n        </div>\n    )\n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}